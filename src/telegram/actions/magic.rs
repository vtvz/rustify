use futures::{StreamExt, future};
use indoc::formatdoc;
use rand::seq::SliceRandom;
use rspotify::AuthCodeSpotify;
use rspotify::clients::pagination::Paginator;
use rspotify::model::{FullPlaylist, PlayableId, PlaylistId, UserId};
use rspotify::prelude::{BaseClient as _, OAuthClient as _};
use teloxide::payloads::EditMessageTextSetters;
use teloxide::prelude::Requester;
use teloxide::types::{ChatId, ParseMode};

use crate::app::App;
use crate::spotify::CurrentlyPlaying;
use crate::telegram::handlers::HandleStatus;
use crate::telegram::keyboards::StartKeyboard;
use crate::telegram::utils::link_preview_small_top;
use crate::user::UserState;

pub async fn get_playlist(
    spotify: &AuthCodeSpotify,
    user_id: UserId<'static>,
) -> anyhow::Result<FullPlaylist> {
    let playlist = spotify
        .user_playlist_create(
            user_id,
            "Rustify Magic Playlist",
            Some(false),
            Some(false),
            Some("Autogenerated Playlist by Rustify Bot"),
        )
        .await?;

    Ok(playlist)
}

pub async fn handle(
    app: &'static App,
    state: &UserState,
    chat_id: ChatId,
) -> anyhow::Result<HandleStatus> {
    if !state.is_spotify_authed().await {
        return Ok(HandleStatus::Skipped);
    }

    let Some(spotify_user) = state.spotify_user().await? else {
        return Ok(HandleStatus::Skipped);
    };

    let m = app
        .bot()
        .send_message(chat_id, "‚è≥ Generating Magic Playlist")
        .await?;

    let spotify = state.spotify().await;
    let mut saved_tracks = spotify.current_user_saved_tracks(None);
    let mut track_ids = vec![];
    while let Some(track) = saved_tracks.next().await {
        let track = track?;
        if let Some(track_id) = track.track.id {
            track_ids.push(track_id.into())
        }
    }

    track_ids.shuffle(&mut rand::rng());

    let playlist = get_playlist(&spotify, spotify_user.id).await?;

    for chunk in track_ids.chunks(100) {
        spotify
            .playlist_add_items(playlist.id.clone(), chunk.iter().cloned(), None)
            .await?;
    }

    app.bot()
        .edit_message_text(
            m.chat.id,
            m.id,
            formatdoc!(
                r#"
                    Created <a href="{}">Magic Playlist</a>
                "#,
                playlist.href
            ),
        )
        .parse_mode(ParseMode::Html)
        .await?;

    Ok(HandleStatus::Handled)
}
