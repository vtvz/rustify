use anyhow::Context;
use futures::StreamExt;
use rand::seq::SliceRandom;
use rspotify::model::{Id, UserId};
use rspotify::prelude::{BaseClient as _, OAuthClient as _};
use teloxide::payloads::{EditMessageTextSetters, SendMessageSetters};
use teloxide::prelude::Requester;
use teloxide::types::{CallbackQuery, ChatId, InlineKeyboardMarkup, ParseMode, ReplyMarkup};

use crate::app::App;
use crate::services::UserService;
use crate::spotify::ShortPlaylist;
use crate::telegram::actions;
use crate::telegram::handlers::HandleStatus;
use crate::telegram::inline_buttons::InlineButtons;
use crate::telegram::utils::link_preview_small_top;
use crate::user::UserState;

#[tracing::instrument(skip_all, fields(user_id = %state.user_id()))]
async fn get_playlist(
    state: &UserState,
    spotify_user_id: UserId<'static>,
    magic_playlist_id: String,
) -> anyhow::Result<ShortPlaylist> {
    let playlist_name = "Magicâœ¨";

    let spotify = state.spotify().await;

    let mut playlists_stream = spotify.user_playlists(spotify_user_id.clone());

    while let Some(playlist) = playlists_stream.next().await {
        let playlist = playlist?;
        if playlist.id.id() == magic_playlist_id {
            spotify
                .playlist_replace_items(playlist.id.clone(), [])
                .await?;

            return Ok(playlist.into());
        }
    }

    let playlist = spotify
        .user_playlist_create(
            spotify_user_id,
            playlist_name,
            Some(false),
            Some(false),
            Some("Autogenerated Playlist by Rustify Bot"),
        )
        .await?;

    Ok(playlist.into())
}

#[tracing::instrument(skip_all, fields(user_id = %state.user_id()))]
pub async fn handle_inline(
    app: &'static App,
    state: &UserState,
    q: CallbackQuery,
) -> anyhow::Result<()> {
    let chat_id = q.from.id;

    if !state.is_spotify_authed().await {
        actions::register::send_register_invite(app, chat_id.into(), state.locale()).await?;

        return Ok(());
    }

    let Some(spotify_user) = state.spotify_user().await? else {
        return Ok(());
    };

    let message_id = q.message.clone().context("Message is empty")?.id();

    let header = t!("magic.header", locale = state.locale());

    app.bot()
        .edit_message_text(
            chat_id,
            message_id,
            t!("magic.generating", header = header, locale = state.locale()),
        )
        .parse_mode(ParseMode::Html)
        .await?;

    let playlist = generate_playlist(app, state, spotify_user).await;

    match playlist {
        Ok(playlist) => {
            app.bot()
                .edit_message_text(
                    chat_id,
                    message_id,
                    t!(
                        "magic.generated",
                        header = header,
                        url = playlist.url(),
                        locale = state.locale()
                    ),
                )
                .parse_mode(ParseMode::Html)
                .link_preview_options(link_preview_small_top(playlist.url()))
                .await?;

            Ok(())
        },

        Err(err) => {
            app.bot()
                .edit_message_text(
                    chat_id,
                    message_id,
                    t!("magic.failed", header = header, locale = state.locale()),
                )
                .parse_mode(ParseMode::Html)
                .await?;

            Err(err)
        },
    }
}

#[tracing::instrument(skip_all, fields(user_id = %state.user_id()))]
async fn generate_playlist(
    app: &App,
    state: &UserState,
    spotify_user: rspotify::model::PrivateUser,
) -> Result<ShortPlaylist, anyhow::Error> {
    let spotify = state.spotify().await;
    let mut saved_tracks = spotify.current_user_saved_tracks(None);
    let mut track_ids = vec![];
    while let Some(track) = saved_tracks.next().await {
        let track = track?;
        if let Some(track_id) = track.track.id {
            track_ids.push(track_id.into())
        }
    }
    track_ids.shuffle(&mut rand::rng());
    let playlist = get_playlist(
        state,
        spotify_user.id,
        state.user().magic_playlist.clone().unwrap_or("none".into()),
    )
    .await?;
    UserService::set_magic_playlist(app.db(), state.user_id(), playlist.id().id()).await?;
    for chunk in track_ids.chunks(100) {
        spotify
            .playlist_add_items(playlist.id().clone(), chunk.iter().cloned(), None)
            .await?;
    }
    Ok(playlist)
}

#[tracing::instrument(skip_all, fields(user_id = %state.user_id()))]
pub async fn handle(
    app: &'static App,
    state: &UserState,
    chat_id: ChatId,
) -> anyhow::Result<HandleStatus> {
    if !state.is_spotify_authed().await {
        actions::register::send_register_invite(app, chat_id, state.locale()).await?;

        return Ok(HandleStatus::Handled);
    }

    let header = t!("magic.header", locale = state.locale());

    app.bot()
        .send_message(
            chat_id,
            t!(
                "magic.description",
                header = header,
                locale = state.locale()
            ),
        )
        .parse_mode(ParseMode::Html)
        .reply_markup(ReplyMarkup::InlineKeyboard(InlineKeyboardMarkup::new(
            vec![vec![
                InlineButtons::Magic.into_inline_keyboard_button(state.locale()),
            ]],
        )))
        .await?;

    Ok(HandleStatus::Handled)
}
